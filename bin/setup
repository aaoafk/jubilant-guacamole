#!/usr/bin/env ruby
=begin
require "fileutils"

# path to your application root.
APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

FileUtils.chdir APP_ROOT do
  # This script is a way to set up or update your development environment automatically.
  # This script is idempotent, so that you can run it at any time and get an expectable outcome.
  # Add necessary setup steps to this file.

  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  # puts "\n== Copying sample files =="
  # unless File.exist?("config/database.yml")
  #   FileUtils.cp "config/database.yml.sample", "config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  puts "\n== Restarting application server =="
  system! "bin/rails restart"
end
=end
def setup
  log "Installing gems"
  # Only do bundle install if the much-faster
  # bundle check indicates we need to
  system! "bundle check || bundle install"
  log "Installing Node modules"
  # Only do yarn install if the much-faster
  # yarn check indicates we need to. Note that
  # --check-files is needed to force Yarn to actually
  # examine what's in node_modules
  #system! "bin/yarn check --check-files || bin/yarn install"
  log "Dropping & recreating the development database"
  # Note that the very first time this runs, db:reset
  # will fail, but this failure is fixed by
  # doing a db:migrate
  system! "bin/rails db:reset || bin/rails db:migrate"
  log "Dropping & recreating the test database"
  # Setting the RAILS_ENV explicitly to be sure
  # we actually reset the test database
  system!({ "RAILS_ENV" => "test" }, "bin/rails db:reset")
  log "All set up."
  log ""
  log "Confused?, run: "
  log ""
  log "       bin/setup help"
  log ""
end

def help
  log "Useful commands:"
  log ""
  log "bin/run # run app locally"
  log ""
  log "bin/ci #runs all tests and checks as CI would"
  log ""
  log "bin/rails test # run non-system tests"
  log ""
  log "bin/rails test:system # run system tests"
  log ""
  log "bin/setup help # show this help"
  log ""
  log "LOGRAGE_IN_DEVELOPMENT=true bin/run # +> run app locally using production-like logging"
end

def system!( *args )
  log "Executing #{args}"
  if system( *args )
    log "#{args} succeeded"
  else
    log "#{args} failed"
    abort
  end
end

def log(msg)
  puts "[ bin/setup ] #{msg}"
end

if ARGV[0] == 'help'
  help
else
  setup
end
